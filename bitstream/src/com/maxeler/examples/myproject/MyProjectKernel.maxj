package com.maxeler.examples.myproject;

import com.maxeler.examples.myproject.MyProjectTypes.SomeLinkType;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLite;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLite.IO.PushInput;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLite.IO.PushOutput;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEStruct;
import com.maxeler.networking.v1.managers.NetworkManager;

public class MyProjectKernel extends KernelLite {
	public static String INPUT = "inputFrame";
	public static String OUTPUT = "outputFrame";

	public MyProjectKernel(NetworkManager owner) {
		super(owner, "MyProjectKernel");

		SomeLinkType linkType = MyProjectTypes.someLinkType;

		PushInput<DFEStruct> input = io.pushInput(INPUT, linkType, 8);

		DFEStruct inputStruct = input.data;
		DFEVar inputValid = input.valid;
		DFEVar sof = (DFEVar)inputStruct.get(linkType.getSOF());
		DFEVar eof = (DFEVar)inputStruct.get(linkType.getEOF());
		DFEVar data = inputStruct.get(linkType.getData());


		debug.simPrintf(inputValid, "Got data: 0x%x, sof=%d, eof=%d\n", data, sof, eof);



		PushOutput<DFEStruct> pushOut = io.pushOutput(OUTPUT, linkType, 8);

		pushOut.data <== inputStruct;
		pushOut.valid <== inputValid;

		input.stall <== optimization.pipeline(pushOut.stall);

	}
}
